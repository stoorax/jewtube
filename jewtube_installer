#!/usr/bin/env pwsh
#Requires -Version 5

$ErrorActionPreference = "Stop"

# Logfile erstellen
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$logFile = "C:\Users\$env:USERNAME\AppData\Local\Temp\JewTube_Install_$timestamp.log"
Start-Transcript -Path $logFile -Append

function Write-Log {
    param([string]$message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp - $message" | Out-File $logFile -Append
    Write-Host $message
}

Write-Host "**********************"
Write-Host "nStart der Windows PowerShell-Aufzeichnung"
Write-Host "Startzeit: $(Get-Date -Format 'yyyyMMddHHmmss')"
Write-Host "Benutzername: $env:USERDOMAIN\$env:USERNAME"
Write-Host "RunAs-Benutzer: $env:USERDOMAIN\$env:USERNAME"
Write-Host "Konfigurationsname: "
Write-Host "Computer: $env:COMPUTERNAME (Microsoft Windows NT $([System.Environment]::OSVersion.Version))"
Write-Host "Hostanwendung: $($MyInvocation.MyCommand.Path)"
Write-Host "Prozess-ID: $PID"
Write-Host "PSVersion: $($PSVersionTable.PSVersion)"
Write-Host "PSEdition: $($PSVersionTable.PSEdition)"
Write-Host "PSCompatibleVersions: $($PSVersionTable.PSCompatibleVersions)"
Write-Host "BuildVersion: $($PSVersionTable.BuildVersion)"
Write-Host "CLRVersion: $($PSVersionTable.ClrVersion)"
Write-Host "WSManStackVersion: $($PSVersionTable.WSManStackVersion)"
Write-Host "PSRemotingProtocolVersion: $($PSVersionTable.PSRemotingProtocolVersion)"
Write-Host "SerializationVersion: $($PSVersionTable.SerializationVersion)"
Write-Host "**********************`n"

Write-Log "=== JewTube Installation ==="
Write-Log "Logfile: $logFile`n"

# Python check
$python = (Get-Command python -ErrorAction SilentlyContinue).Source
if (-not $python) {
    $python = (Get-Command python3 -ErrorAction SilentlyContinue).Source
}

if (-not $python) {
    Write-Log "Python nicht gefunden! Bitte installieren Sie Python von https://www.python.org/downloads/"
    exit 1
}

Write-Log "Python gefunden: $python`n"

# Paketliste
$packages = @("yt-dlp", "ytmusicapi", "browser-cookie3")

foreach ($pkg in $packages) {
    try {
        Write-Log "Installiere $pkg..."
        & $python -m pip install --upgrade $pkg
        if ($LASTEXITCODE -ne 0) {
            throw "Pip-Installation fehlgeschlagen mit Exit-Code $LASTEXITCODE"
        }
        Write-Log "$pkg erfolgreich installiert"
    }
    catch {
        # Hier wurde der Fehler behoben: ${_} statt $_
        Write-Log "Fehler bei $pkg: ${_}"
    }
}

# VersionsprÃ¼fung
Write-Log "`n=== Versionspruefung ==="
$ytdlpVersion = & $python -c "import yt_dlp; print(yt_dlp.version.__version__)" 2>$null
$ytmusicapiVersion = & $python -c "import ytmusicapi; print(ytmusicapi.__version__)" 2>$null
Write-Log "yt-dlp Version: $ytdlpVersion"
Write-Log "ytmusicapi Version: $ytmusicapiVersion`n"

# Funktionstest
Write-Log "=== Funktionstest ==="
$testUrl = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
Write-Log "Teste Download von $testUrl ..."
& $python -m yt_dlp -f best "$testUrl" --no-download
if ($LASTEXITCODE -ne 0) {
    Write-Log "Funktionstest fehlgeschlagen!"
    exit 1
}

Write-Log "Funktionstest erfolgreich!`n"

Write-Log "=== INSTALLATION ERFOLGREICH ==="
Write-Log "Logfile: $logFile"
Stop-Transcript

Read-Host "Druecken Sie ENTER zum Beenden..."
