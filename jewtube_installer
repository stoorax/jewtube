# JewTube Installer mit robuster Python-Erkennung
# Ausf√ºhrung mit: irm https://raw.githubusercontent.com/stoorax/jewtube/main/jewtube_installer | iex

function Get-ActualPython {
    # Pr√ºft alle m√∂glichen Python-Pfade
    $pythonPaths = @(
        "$env:LocalAppData\Programs\Python\Python311\python.exe",
        "$env:LocalAppData\Programs\Python\Python310\python.exe",
        "$env:LocalAppData\Programs\Python\Python39\python.exe",
        "$env:AppData\Python\Python311\python.exe",
        "C:\Program Files\Python311\python.exe",
        "C:\Program Files\Python310\python.exe",
        "C:\Program Files\Python39\python.exe"
    )
    
    foreach ($path in $pythonPaths) {
        if (Test-Path $path) {
            return $path
        }
    }
    
    # Fallback: Versucht Python √ºber PATH zu finden
    try {
        return (Get-Command python -ErrorAction Stop).Source
    }
    catch {
        return $null
    }
}

function Write-Step {
    param($step, $message)
    Write-Host "`n=====[ SCHRITT $step ]=====" -ForegroundColor Magenta
    Write-Host $message -ForegroundColor Cyan
}

# Admin-Check
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "`n‚ö†Ô∏è ADMIN-REICHTE ERFORDERLICH" -ForegroundColor Red
    Write-Host "Das Skript wird sich neu starten..." -ForegroundColor Yellow
    
    $scriptUrl = "https://raw.githubusercontent.com/stoorax/jewtube/main/jewtube_installer"
    $command = @"
Start-Process powershell -Verb RunAs -ArgumentList '-NoExit -NoProfile -ExecutionPolicy Bypass -Command "irm \`"$scriptUrl\`" | iex"'
"@

    Invoke-Expression $command
    exit
}

### HAUPTPROGRAMM ###
try {
    # 0. Python-Pfad ermitteln
    $pythonExe = Get-ActualPython
    
    # 1. Winget Installation
    Write-Step -step 1 -message "√úberpr√ºfe winget Installation"
    if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
        Write-Host "Winget nicht gefunden, installiere..." -ForegroundColor Yellow
        
        $tempFile = "$env:TEMP\winget_install.msixbundle"
        try {
            Invoke-WebRequest -Uri https://aka.ms/getwinget -OutFile $tempFile -UseBasicParsing
            Add-AppxPackage -Path $tempFile -ErrorAction Stop
            Write-Host "‚úÖ Winget erfolgreich installiert" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ùå Fehler: $_" -ForegroundColor Red
            throw "Winget Installation fehlgeschlagen"
        }
        finally {
            if (Test-Path $tempFile) { Remove-Item $tempFile }
        }
    }
    else {
        Write-Host "Winget bereits installiert" -ForegroundColor Green
    }

    # 2. Python Installation
    Write-Step -step 2 -message "√úberpr√ºfe Python 3.11"
    if (-not $pythonExe) {
        Write-Host "Python nicht gefunden, installiere..." -ForegroundColor Yellow
        
        try {
            winget install --id Python.Python.3.11 --exact --accept-source-agreements --accept-package-agreements
            $pythonExe = Get-ActualPython
            
            if (-not $pythonExe) {
                throw "Python installiert, aber nicht gefunden"
            }
            
            Write-Host "‚úÖ Python erfolgreich installiert: $pythonExe" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ùå Fehler: $_" -ForegroundColor Red
            throw "Python Installation fehlgeschlagen"
        }
    }
    else {
        Write-Host "Python gefunden: $pythonExe" -ForegroundColor Green
        Write-Host "Version: $(& `"$pythonExe`" --version 2>&1)" -ForegroundColor Green
    }

    # 3. Paketinstallation
    Write-Step -step 3 -message "Installiere ben√∂tigte Pakete"
    $packages = @(
        @{Name="yt-dlp"; Test="import yt_dlp; print(f'Version: {yt_dlp.__version__}')"},
        @{Name="ytmusicapi"; Test="import ytmusicapi; print(f'Version: {ytmusicapi.__version__}')"},
        @{Name="browser-cookie3"; Test="import browser_cookie3; print('Import erfolgreich')"}
    )

    foreach ($pkg in $packages) {
        Write-Host "`nüîÑ Installiere $($pkg.Name)..." -ForegroundColor Blue
        try {
            # Installiere Paket
            & `"$pythonExe`" -m pip install --upgrade $pkg.Name --disable-pip-version-check
            
            # Verifiziere Installation
            $result = & `"$pythonExe`" -c $pkg.Test 2>&1
            Write-Host "‚úÖ $($pkg.Name) installiert: $result" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è Warnung: $($pkg.Name) konnte nicht verifiziert werden: $_" -ForegroundColor Yellow
        }
    }

    # 4. Abschluss
    Write-Step -step 4 -message "Installation abgeschlossen"
    Write-Host "`nüéâ JEWTUBE ERFOLGREICH INSTALLIERT" -ForegroundColor Green
    
    # Systeminformationen
    Write-Host "`nSysteminformationen:" -ForegroundColor Cyan
    Write-Host "Python: $(& `"$pythonExe`" --version 2>&1)" -ForegroundColor Gray
    Write-Host "yt-dlp: $(& `"$pythonExe`" -c 'import yt_dlp; print(yt_dlp.__version__)' 2>&1)" -ForegroundColor Gray
    Write-Host "ytmusicapi: $(& `"$pythonExe`" -c 'import ytmusicapi; print(ytmusicapi.__version__)' 2>&1)" -ForegroundColor Gray
    
    Write-Host "`nVerf√ºgbare Kommandos:" -ForegroundColor Cyan
    Write-Host "‚Ä¢ `"$pythonExe`" -m yt_dlp [URL]" -ForegroundColor White
    Write-Host "‚Ä¢ `"$pythonExe`" -m ytmusicapi" -ForegroundColor White
}
catch {
    Write-Host "`n‚ùå‚ùå‚ùå KRITISCHER FEHLER ‚ùå‚ùå‚ùå" -ForegroundColor Red
    Write-Host "Fehlerdetails: $_" -ForegroundColor Red
    $errorOccurred = $true
}

# Warte auf Benutzereingabe
Write-Host "`n" # Leerzeile
Write-Host "========================================" -ForegroundColor DarkGray
if ($errorOccurred) {
    Write-Host " FEHLER BEI DER INSTALLATION " -BackgroundColor Red -ForegroundColor White
}
else {
    Write-Host " INSTALLATION ERFOLGREICH " -BackgroundColor Green -ForegroundColor Black
}
Write-Host "========================================" -ForegroundColor DarkGray

Write-Host "`nDr√ºcken Sie ENTER um das Fenster zu schlie√üen..." -ForegroundColor Yellow
[void][System.Console]::ReadLine()
