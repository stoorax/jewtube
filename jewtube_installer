# JewTube Installer (Fehlerfrei & Getestet)
# Ausführung mit: iwr https://raw.githubusercontent.com/stoorax/jewtube/main/jewtube_installer | iex

# Logfile erstellen
$logFile = "$env:TEMP\JewTube_Install_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
Start-Transcript -Path $logFile -Append | Out-Null

# Admin-Check
$adminCheck = [Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()
if (-NOT $adminCheck.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    $scriptUrl = "https://raw.githubusercontent.com/stoorax/jewtube/main/jewtube_installer"
    Stop-Transcript | Out-Null
    Start-Process powershell -Verb RunAs -ArgumentList "-NoExit -Command `"irm '$scriptUrl' | iex`""
    exit
}

Write-Host "=== JewTube Installation ==="
Write-Host "Logfile: $logFile`n"

try {
    # 1. Python finden oder installieren
    $pythonExe = $null
    $pythonPaths = @(
        "$env:LocalAppData\Programs\Python\Python311\python.exe",
        "C:\Program Files\Python311\python.exe"
    )
    
    foreach ($path in $pythonPaths) {
        if (Test-Path $path) { 
            $pythonExe = $path
            break
        }
    }
    
    if (-not $pythonExe) {
        Write-Host "Python nicht gefunden, installiere mit winget..."
        winget install --id Python.Python.3.11 --exact --accept-source-agreements --accept-package-agreements --silent
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
        
        foreach ($path in $pythonPaths) {
            if (Test-Path $path) { 
                $pythonExe = $path
                break
            }
        }
        
        if (-not $pythonExe) {
            throw "Python-Installation fehlgeschlagen oder Pfad nicht gefunden"
        }
    }
    
    Write-Host "Python gefunden: $pythonExe"

    # 2. Pakete installieren
    $packages = @("yt-dlp", "ytmusicapi", "browser-cookie3")
    foreach ($pkg in $packages) {
        Write-Host "Installiere $pkg..."
        & $pythonExe -m pip install --upgrade $pkg --disable-pip-version-check
    }

    # 3. Versionsprüfung
    Write-Host "`n=== Versionsprüfung ==="
    
    # yt-dlp Version
    $ytdlpVersion = yt-dlp --version 2>&1
    Write-Host "yt-dlp Version: $ytdlpVersion"
    
    # ytmusicapi Version
    $ytmusicVersion = & $pythonExe -c "import ytmusicapi; print(ytmusicapi.__version__)" 2>&1
    Write-Host "ytmusicapi Version: $ytmusicVersion"

    # 4. Funktionstest
    Write-Host "`n=== Funktionstest ==="
    yt-dlp --simulate --format best "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Funktionstest erfolgreich!" -ForegroundColor Green
        Write-Host "`n=== INSTALLATION ERFOLGREICH ===" -ForegroundColor Green
    }
    else {
        Write-Host "Funktionstest fehlgeschlagen" -ForegroundColor Red
        Write-Host "`n=== INSTALLATION MIT WARNUNGEN ===" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "`n=== FEHLER ===" -ForegroundColor Red
    Write-Host $_
    Write-Host "`n=== INSTALLATION FEHLGESCHLAGEN ===" -ForegroundColor Red
}
finally {
    # Logfile anzeigen
    Write-Host "`n=== Logfile ==="
    Write-Host "Öffne Logfile: $logFile"
    Start-Process notepad $logFile
    
    # Auf Benutzereingabe warten
    Write-Host "`nDrücken Sie ENTER zum Beenden..."
    [void][System.Console]::ReadLine()
    
    Stop-Transcript | Out-Null
}
